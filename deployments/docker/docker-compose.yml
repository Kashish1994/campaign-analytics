version: '3.8'

services:
  # API service
  api:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
      target: api
    container_name: campaign-analytics-api
    ports:
      - "8080:8080"
    environment:
      - CA_POSTGRES_HOST=postgres
      - CA_POSTGRES_PORT=5432
      - CA_POSTGRES_USERNAME=postgres
      - CA_POSTGRES_PASSWORD=postgres
      - CA_CLICKHOUSE_HOST=clickhouse
      - CA_CLICKHOUSE_PORT=9000
      - CA_REDIS_ADDR=redis:6379
      - CA_KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - clickhouse
      - redis
      - kafka
    restart: unless-stopped
    networks:
      - campaign-analytics-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker service
  worker:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
      target: worker
    container_name: campaign-analytics-worker
    environment:
      - CA_POSTGRES_HOST=postgres
      - CA_POSTGRES_PORT=5432
      - CA_POSTGRES_USERNAME=postgres
      - CA_POSTGRES_PASSWORD=postgres
      - CA_CLICKHOUSE_HOST=clickhouse
      - CA_CLICKHOUSE_PORT=9000
      - CA_REDIS_ADDR=redis:6379
      - CA_KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - clickhouse
      - redis
      - kafka
    restart: unless-stopped
    networks:
      - campaign-analytics-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: campaign-analytics-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=campaign_analytics
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - campaign-analytics-network

  # ClickHouse database
  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    container_name: campaign-analytics-clickhouse
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - campaign-analytics-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: campaign-analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - campaign-analytics-network

  # Kafka message queue with KRaft mode (no ZooKeeper)
  kafka:
    image: bitnami/kafka:3.4
    container_name: campaign-analytics-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - campaign-analytics-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: campaign-analytics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - campaign-analytics-network

networks:
  campaign-analytics-network:
    driver: bridge

volumes:
  postgres-data:
  clickhouse-data:
  redis-data:
  kafka-data:
  prometheus-data:
